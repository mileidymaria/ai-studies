import os
import sqlite3
import asyncio
from dotenv import load_dotenv
from tools import math
from utils import tools
from autogen_agentchat.agents import AssistantAgent
from autogen_agentchat.messages import TextMessage
from autogen_core import CancellationToken
from autogen_ext.models.openai import OpenAIChatCompletionClient
from autogen_agentchat.ui import Console

# -----------------------------
# Environment & Database Setup
# -----------------------------
db_path = "state_db/example.db"
os.makedirs(os.path.dirname(db_path), exist_ok=True)
conn = sqlite3.connect(db_path, check_same_thread=False)

dotenv_path = os.path.join(os.path.dirname(__file__), ".env")
print({"dotenv_path": dotenv_path})
load_dotenv(dotenv_path)
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# -----------------------------
# Agent Initialization
# -----------------------------
agent = AssistantAgent(
    "assistant", 
    OpenAIChatCompletionClient(model="gpt-3.5-turbo"),
    # parallel_tool_calls = True  # Enable only if tools are independent
    system_message="""
        Hello! Your name is Jarvis.
        You are my personal assistant.
        You can use the tools.
    """,
    tools=[math.add_operation, math.multiply_operation, math.divide_operation, math.subtract_operation]
)

# -----------------------------
# Simple Agent Run
# -----------------------------
async def assistant_run() -> None:
    """
    Runs a simple agent interaction without streaming.

    Demonstrates the difference between:
    - inner_messages: the complete list of internal messages/events 
        generated by the agent during reasoning. Includes intermediate steps,
        tool calls, system messages, and more.
    - chat_message: the final clean message that would be shown to the user,
        without all the internal details.
    """
    response = await agent.on_messages(
        [TextMessage(content="Who", source="user")],
        cancellation_token=CancellationToken(),
    )

    print(response.chat_message.content)


# -----------------------------
# Streaming Agent Run
# -----------------------------
async def assistant_run_stream(prompt: str) -> None:
    """
    Runs a streaming agent, extracts tool results, and sends them back to the model
    for a formatted final response.
    """
    # Run the initial prompt and get raw tool results
    initial_response = await agent.on_messages(
        [TextMessage(content=prompt, source="user")],
        cancellation_token=CancellationToken(),
    )
    

    tool_results = tools.extract_tool_results(initial_response)

    # Format tool results in a user-friendly string
    formatted_results = "\n".join(
        f"{r['tool_name']}: {r['result']}" for r in tool_results
    )

    final_prompt = f"""
        You are an assistant that receives results from various tools. Your task is to generate a single, clear, user-friendly sentence that integrates the content of all tools.

        - Do NOT include the tool names explicitly.
        - Integrate the content naturally so it reads as one coherent statement.
        - Make it concise, informative, and easy for a user to understand.
        - Do NOT return JSON, a list, or any extra explanation—just one readable sentence.

        Example of input and expected output (do NOT use these numbers, this is only for style reference):

        Input:
        {{"search": "amazonia is a forest in brazil.", "search_for_curiosities": "Brazil is the largest country in latin america"}}

        Expected output:
        "When searching about the Amazonia, we found that it is a forest in Brazil, which is the largest country in Latin America—a curious fact."

        Now, using the actual tool results below, create a sentence in the same style:
        {formatted_results}
    """


    # Run agent for the final formatted answer
    final_response = await Console(agent.on_messages_stream(
        [TextMessage(content=final_prompt, source="user")],
        cancellation_token=CancellationToken(),
    ))

    print("=== Final Answer ===")
    print(final_response.chat_message.content)


# -----------------------------
# Entry Point
# -----------------------------
prompt = """
    You are an assistant with access to tools for basic math operations. 
    Here are two numbers: 2 and 6. 
    Your task is to use the corresponding tool for each of the four operations: addition, subtraction, multiplication, division.
"""

if __name__ == "__main__":
    asyncio.run(assistant_run_stream(prompt))
